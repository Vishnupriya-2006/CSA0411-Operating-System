#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

// Function for thread 1
void* threadFunc1(void* arg) {
    for (int i = 1; i <= 5; i++) {
        printf("Thread 1: Count %d\n", i);
        sleep(1); // simulate some work
    }
    return NULL;
}

// Function for thread 2
void* threadFunc2(void* arg) {
    for (int i = 1; i <= 5; i++) {
        printf("Thread 2: Count %d\n", i);
        sleep(1);
    }
    return NULL;
}

int main() {
    pthread_t t1, t2;

    // Create threads
    if (pthread_create(&t1, NULL, threadFunc1, NULL) != 0) {
        perror("Failed to create thread 1");
        exit(1);
    }
    if (pthread_create(&t2, NULL, threadFunc2, NULL) != 0) {
        perror("Failed to create thread 2");
        exit(1);
    }

    // Wait for threads to finish
    pthread_join(t1, NULL);
    pthread_join(t2, NULL);

    printf("Both threads finished execution.\n");

    return 0;
}

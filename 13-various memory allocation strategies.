#include <stdio.h>

#define MAX_BLOCKS 10
#define MAX_PROCESSES 10

// Function to implement First Fit
void firstFit(int blockSize[], int blocks, int processSize[], int processes) {
    int allocation[MAX_PROCESSES];
    for (int i = 0; i < processes; i++)
        allocation[i] = -1; // no block allocated yet

    for (int i = 0; i < processes; i++) {
        for (int j = 0; j < blocks; j++) {
            if (blockSize[j] >= processSize[i]) {
                allocation[i] = j;
                blockSize[j] -= processSize[i];
                break;
            }
        }
    }

    printf("\nFirst Fit Allocation:\n");
    printf("Process\tSize\tBlock\n");
    for (int i = 0; i < processes; i++) {
        if (allocation[i] != -1)
            printf("P%d\t%d\t%d\n", i + 1, processSize[i], allocation[i] + 1);
        else
            printf("P%d\t%d\tNot Allocated\n", i + 1, processSize[i]);
    }
}

// Function to implement Best Fit
void bestFit(int blockSize[], int blocks, int processSize[], int processes) {
    int allocation[MAX_PROCESSES];
    for (int i = 0; i < processes; i++)
        allocation[i] = -1;

    for (int i = 0; i < processes; i++) {
        int bestIdx = -1;
        for (int j = 0; j < blocks; j++) {
            if (blockSize[j] >= processSize[i]) {
                if (bestIdx == -1 || blockSize[j] < blockSize[bestIdx]) {
                    bestIdx = j;
                }
            }
        }
        if (bestIdx != -1) {
            allocation[i] = bestIdx;
            blockSize[bestIdx] -= processSize[i];
        }
    }

    printf("\nBest Fit Allocation:\n");
    printf("Process\tSize\tBlock\n");
    for (int i = 0; i < processes; i++) {
        if (allocation[i] != -1)
            printf("P%d\t%d\t%d\n", i + 1, processSize[i], allocation[i] + 1);
        else
            printf("P%d\t%d\tNot Allocated\n", i + 1, processSize[i]);
    }
}

// Function to implement Worst Fit
void worstFit(int blockSize[], int blocks, int processSize[], int processes) {
    int allocation[MAX_PROCESSES];
    for (int i = 0; i < processes; i++)
        allocation[i] = -1;

    for (int i = 0; i < processes; i++) {
        int worstIdx = -1;
        for (int j = 0; j < blocks; j++) {
            if (blockSize[j] >= processSize[i]) {
                if (worstIdx == -1 || blockSize[j] > blockSize[worstIdx]) {
                    worstIdx = j;
                }
            }
        }
        if (worstIdx != -1) {
            allocation[i] = worstIdx;
            blockSize[worstIdx] -= processSize[i];
        }
    }

    printf("\nWorst Fit Allocation:\n");
    printf("Process\tSize\tBlock\n");
    for (int i = 0; i < processes; i++) {
        if (allocation[i] != -1)
            printf("P%d\t%d\t%d\n", i + 1, processSize[i], allocation[i] + 1);
        else
            printf("P%d\t%d\tNot Allocated\n", i + 1, processSize[i]);
    }
}

int main() {
    int blockSize[MAX_BLOCKS], processSize[MAX_PROCESSES];
    int blocks, processes;

    printf("Enter number of memory blocks: ");
    scanf("%d", &blocks);
    printf("Enter sizes of blocks:\n");
    for (int i = 0; i < blocks; i++) {
        scanf("%d", &blockSize[i]);
    }

    printf("Enter number of processes: ");
    scanf("%d", &processes);
    printf("Enter sizes of processes:\n");
    for (int i = 0; i < processes; i++) {
        scanf("%d", &processSize[i]);
    }

    // Run each strategy separately (copy original block sizes)
    int blockCopy[MAX_BLOCKS];

    for (int i = 0; i < blocks; i++) blockCopy[i] = blockSize[i];
    firstFit(blockCopy, blocks, processSize, processes);

    for (int i = 0; i < blocks; i++) blockCopy[i] = blockSize[i];
    bestFit(blockCopy, blocks, processSize, processes);

    for (int i = 0; i < blocks; i++) blockCopy[i] = blockSize[i];
    worstFit(blockCopy, blocks, processSize, processes);

    return 0;
}

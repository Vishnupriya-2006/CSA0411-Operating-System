#include <stdio.h>

#define MAX 100

typedef struct {
    int pid;        // Process ID
    int at;         // Arrival Time
    int bt;         // Burst Time
    int pr;         // Priority
    int ct;         // Completion Time
    int tat;        // Turnaround Time
    int wt;         // Waiting Time
    int rt;         // Remaining Time
    int finished;   // Flag
} Process;

int main() {
    int n, time = 0, completed = 0;
    Process p[MAX];

    printf("Enter number of processes: ");
    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("\nEnter Arrival Time, Burst Time, Priority for Process %d: ", i + 1);
        scanf("%d %d %d", &p[i].at, &p[i].bt, &p[i].pr);
        p[i].rt = p[i].bt;  // Remaining time = Burst time initially
        p[i].finished = 0;
    }

    // Preemptive Priority Scheduling
    while (completed < n) {
        int idx = -1;
        int highestPriority = 1e9;  // smaller value means higher priority

        // Find highest priority process at current time
        for (int i = 0; i < n; i++) {
            if (p[i].at <= time && !p[i].finished && p[i].rt > 0) {
                if (p[i].pr < highestPriority) {
                    highestPriority = p[i].pr;
                    idx = i;
                }
                else if (p[i].pr == highestPriority) {
                    // tie-breaker â†’ choose earliest arrival
                    if (p[i].at < p[idx].at) {
                        idx = i;
                    }
                }
            }
        }

        if (idx != -1) {
            p[idx].rt--;  // execute process for 1 unit

            if (p[idx].rt == 0) {  // process completed
                p[idx].finished = 1;
                completed++;
                p[idx].ct = time + 1;
                p[idx].tat = p[idx].ct - p[idx].at;
                p[idx].wt = p[idx].tat - p[idx].bt;
            }
        }
        time++;
    }

    // Display results
    float avgWT = 0, avgTAT = 0;
    printf("\nPID\tAT\tBT\tPR\tCT\tTAT\tWT\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t%d\t%d\t%d\n",
               p[i].pid, p[i].at, p[i].bt, p[i].pr,
               p[i].ct, p[i].tat, p[i].wt);
        avgWT += p[i].wt;
        avgTAT += p[i].tat;
    }

    printf("\nAverage Turnaround Time = %.2f", avgTAT / n);
    printf("\nAverage Waiting Time = %.2f\n", avgWT / n);

    return 0;
}

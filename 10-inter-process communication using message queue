#include <stdio.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <sys/types.h>
#include <unistd.h>
#include <string.h>
#include <stdlib.h>

// Define message structure
struct msg_buffer {
    long msg_type;
    char msg_text[100];
} message;

int main() {
    key_t key;
    int msgid;

    // Generate unique key
    key = ftok("msgfile", 65);

    // Create message queue
    msgid = msgget(key, 0666 | IPC_CREAT);
    if (msgid == -1) {
        perror("msgget");
        exit(1);
    }

    pid_t pid = fork();

    if (pid < 0) {
        perror("fork failed");
        exit(1);
    }
    else if (pid == 0) {
        // ---------- Child Process ----------
        sleep(1); // Wait for parent to send
        msgrcv(msgid, &message, sizeof(message.msg_text), 1, 0);
        printf("Child received: %s\n", message.msg_text);

        // Delete message queue after reading
        msgctl(msgid, IPC_RMID, NULL);
    }
    else {
        // ---------- Parent Process ----------
        message.msg_type = 1;
        strcpy(message.msg_text, "Hello from Parent using Message Queue!");

        msgsnd(msgid, &message, sizeof(message.msg_text), 0);
        printf("Parent sent: %s\n", message.msg_text);

        wait(NULL); // Wait for child to finish
    }

    return 0;
}

/* file: mutex_sync.c
   Compile: gcc -o mutex_sync mutex_sync.c -pthread
*/
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define NUM_THREADS 5
#define INCREMENTS 100000

long counter = 0;
pthread_mutex_t lock;

void *worker(void *arg) {
    for (int i = 0; i < INCREMENTS; i++) {
        pthread_mutex_lock(&lock);
        counter++;
        pthread_mutex_unlock(&lock);
    }
    return NULL;
}

int main() {
    pthread_t threads[NUM_THREADS];
    pthread_mutex_init(&lock, NULL);

    for (int i = 0; i < NUM_THREADS; i++) pthread_create(&threads[i], NULL, worker, NULL);
    for (int i = 0; i < NUM_THREADS; i++) pthread_join(threads[i], NULL);

    pthread_mutex_destroy(&lock);

    printf("Expected counter = %d\n", NUM_THREADS * INCREMENTS);
    printf("Final counter = %ld\n", counter);
    return 0;
}
